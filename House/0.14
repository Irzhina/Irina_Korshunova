%matplotlib inline
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import pyplot as plt
import warnings
from pylab import rcParams
rcParams['figure.figsize'] = 12, 12
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.metrics import mean_absolute_error, mean_squared_error
from math import sqrt
from scipy.stats import skew

#загружаем train
df = pd.read_csv("C:/Users/Ира/Downloads/house/train.csv")

df.head()


#загружаем test
dt = pd.read_csv("C:/Users/Ира/Downloads/house/test.csv")

dt.head()

# shape and data types of the data
print(df.shape)
print(df.dtypes)

print(dt.shape)
print(dt.dtypes)

df['SalePrice'].describe()

numeric_cols = df.select_dtypes(include = [np.number])
corr = numeric_cols.corr()
print ('The Most Correlated Features with SalePrice:'), print (corr['SalePrice'].sort_values(ascending = False)[:10], '\n')
print ('The Most Uncorrelated Features with SalePrice:'), print (corr['SalePrice'].sort_values(ascending = False)[-5:])

df_percentage = df.isnull().sum() / df.shape[0]
print (df_percentage[df_percentage > 0.80])
df = df.drop(df_percentage[df_percentage > 0.80].index, axis = 1)
columnstodrop=['Utilities']
df = df.drop(columnstodrop, axis=1)


dt_percentage = dt.isnull().sum() / dt.shape[0]
print (dt_percentage[dt_percentage > 0.80])
dt = dt.drop(dt_percentage[dt_percentage > 0.80].index, axis = 1)
columnstodrop=['Utilities']
dt = dt.drop(columnstodrop, axis=1)

df_numeric = df.select_dtypes(include=[np.number])
numeric_cols = df_numeric.columns.values
print(numeric_cols)

df_non_numeric = df.select_dtypes(exclude=[np.number])
non_numeric_cols = df_non_numeric.columns.values
print(non_numeric_cols)


df['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].mode()[0])
df['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].mode()[0])
df['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].mode()[0])


df['MasVnrType'] = df['MasVnrType'].fillna(df['MasVnrType'].mode()[0])
df['BsmtQual'] = df['BsmtQual'].fillna(df['BsmtQual'].mode()[0])
df['BsmtCond'] = df['BsmtCond'].fillna(df['BsmtCond'].mode()[0])
df['BsmtExposure'] = df['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0])
df['BsmtFinType1'] = df['BsmtFinType1'].fillna(df['BsmtFinType1'].mode()[0])
df['BsmtFinType2'] = df['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0])
df['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])
df['FireplaceQu'] = df['FireplaceQu'].fillna(df['FireplaceQu'].mode()[0])

df['GarageType'] = df['GarageType'].fillna(df['GarageType'].mode()[0])
df['GarageFinish'] = df['GarageFinish'].fillna(df['GarageFinish'].mode()[0])
df['GarageQual'] = df['GarageQual'].fillna(df['GarageQual'].mode()[0])
df['GarageCond'] = df['GarageCond'].fillna(df['GarageCond'].mode()[0])

df.head()

dt_numeric = dt.select_dtypes(include=[np.number])
numeric_cols = dt_numeric.columns.values
print(numeric_cols)

dt_non_numeric = dt.select_dtypes(exclude=[np.number])
non_numeric_cols = dt_non_numeric.columns.values
print(non_numeric_cols)


dt['LotFrontage'] = dt['LotFrontage'].fillna(dt['LotFrontage'].mode()[0])
dt['MasVnrArea'] = dt['MasVnrArea'].fillna(dt['MasVnrArea'].mode()[0])
dt['BsmtFinSF1'] = dt['BsmtFinSF1'].fillna(dt['BsmtFinSF1'].mode()[0])
dt['BsmtFinSF2'] = dt['BsmtFinSF2'].fillna(dt['BsmtFinSF2'].mode()[0])
dt['BsmtUnfSF'] = dt['BsmtUnfSF'].fillna(dt['BsmtUnfSF'].mode()[0])
dt['TotalBsmtSF'] = dt['TotalBsmtSF'].fillna(dt['TotalBsmtSF'].mode()[0])
dt['BsmtFullBath'] = dt['BsmtFullBath'].fillna(dt['BsmtFullBath'].mode()[0])
dt['BsmtHalfBath'] = dt['BsmtHalfBath'].fillna(dt['BsmtHalfBath'].mode()[0])
dt['GarageYrBlt'] = dt['GarageYrBlt'].fillna(dt['GarageYrBlt'].mode()[0])
dt['GarageCars'] = dt['GarageCars'].fillna(dt['GarageCars'].mode()[0])
dt['GarageArea'] = dt['GarageArea'].fillna(dt['GarageArea'].mode()[0])



dt['MSZoning'] = dt['MSZoning'].fillna(dt['MSZoning'].mode()[0])

dt['Exterior1st'] = dt['Exterior1st'].fillna(dt['Exterior1st'].mode()[0])
dt['Exterior2nd'] = dt['Exterior2nd'].fillna(dt['Exterior2nd'].mode()[0])

dt['MasVnrType'] = dt['MasVnrType'].fillna(dt['MasVnrType'].mode()[0])

dt['BsmtQual'] = dt['BsmtQual'].fillna(dt['BsmtQual'].mode()[0])
dt['BsmtCond'] = dt['BsmtCond'].fillna(dt['BsmtCond'].mode()[0])
dt['BsmtExposure'] = dt['BsmtExposure'].fillna(dt['BsmtExposure'].mode()[0])
dt['BsmtFinType1'] = dt['BsmtFinType1'].fillna(dt['BsmtFinType1'].mode()[0])
dt['BsmtFinType2'] = dt['BsmtFinType2'].fillna(dt['BsmtFinType2'].mode()[0])

dt['KitchenQual'] = dt['KitchenQual'].fillna(dt['KitchenQual'].mode()[0])
dt['Functional'] = dt['Functional'].fillna(dt['Functional'].mode()[0])  

dt['FireplaceQu'] = dt['FireplaceQu'].fillna(dt['FireplaceQu'].mode()[0])
dt['GarageType'] = dt['GarageType'].fillna(dt['GarageType'].mode()[0]) 

dt['GarageFinish'] = dt['GarageFinish'].fillna(dt['GarageFinish'].mode()[0])
dt['GarageQual'] = dt['GarageQual'].fillna(dt['GarageQual'].mode()[0]) 

dt['GarageCond'] = dt['GarageCond'].fillna(dt['GarageCond'].mode()[0])
dt['SaleType'] = dt['SaleType'].fillna(dt['SaleType'].mode()[0]) 

dt.head()

test=dt.drop_duplicates()
print(test.shape)

# удаляем повторения
train=df.drop_duplicates()
print(train.shape)

test=test.select_dtypes(include = [np.number]).astype('int64')
train=train.select_dtypes(include = [np.number]).astype('int64')

train['TotalSF'] = train['TotalBsmtSF'] + train['1stFlrSF'] + train['2ndFlrSF']
test['TotalSF'] = test['TotalBsmtSF'] + test['1stFlrSF'] + test['2ndFlrSF']

train['Total_Bathrooms'] = (train['FullBath'] + (0.5 * train['HalfBath']) +
                                train['BsmtFullBath'] + (0.5 * train['BsmtHalfBath']))
train['YrBltAndRemod']=train['YearBuilt']+train['YearRemodAdd']

test['Total_Bathrooms'] = (test['FullBath'] + (0.5 * test['HalfBath']) +
                                 test['BsmtFullBath'] + (0.5 * test['BsmtHalfBath']))
test['YrBltAndRemod']=test['YearBuilt']+test['YearRemodAdd']



plt.scatter(x = train['GrLivArea'], y = train['SalePrice'])
plt.ylabel('SalePrice')
plt.xlabel('GrLivArea')

plt.scatter(x = train['GarageArea'], y = train['SalePrice'])
plt.ylabel('SalePrice')
plt.xlabel('GarageArea')

# remove GrLivArea outliers
train = train[train['GrLivArea'] < 4500]

# remove GarageArea outliers
train = train[train['GarageArea'] < 1200]

#корреляционная матрица
corrmat = train.corr()
f, ax = plt.subplots(figsize=(12, 12))
sns.heatmap(corrmat,  square=True);

#saleprice correlation matrix
k = 12 #number of variables for heatmap
cols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index
cm = np.corrcoef(train[cols].values.T)
sns.set(font_scale=1.25)
hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)
plt.show()

train_numeric = train.select_dtypes(include=[np.number])
numeric_cols = train_numeric.columns.values
print(numeric_cols)

test_numeric = test.select_dtypes(include=[np.number])
numeric_cols = test_numeric.columns.values
print(numeric_cols)

X = train.drop(['SalePrice', 'Id'], axis = 1)
y = np.log1p(train['SalePrice'])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

lr = linear_model.LinearRegression()

model = lr.fit(X_train, y_train)

# make predictions based on model
predictions = model.predict(X_test)

print ('MAE is:', mean_absolute_error(y_test, predictions))
print ('MSE is:', mean_squared_error(y_test, predictions))
print ('RMSE is:', sqrt(mean_squared_error(y_test, predictions)))

submission = pd.DataFrame()
submission['Id'] = test['Id'].astype(int)

temp = test.select_dtypes(include = [np.number]).drop(['Id'], axis = 1).interpolate()

predictions = model.predict(temp)

predictions = np.exp(predictions)
submission['SalePrice'] = predictions


submission.to_csv('submission001.csv', index = False)



